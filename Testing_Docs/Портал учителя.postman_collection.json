{
	"info": {
		"_postman_id": "8891d2e4-391c-4c52-8cc0-f75dfe9f1411",
		"name": "Портал учителя",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34335390"
	},
	"item": [
		{
			"name": "Позитивные сценарии",
			"item": [
				{
					"name": "Добавление события",
					"item": [
						{
							"name": "Создать событие",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Сохраняем в переменную id ЛС, имя переменной \"LS_id\"\r",
											"try {\r",
											"    // Получение JSON-ответа\r",
											"    let response = pm.response.json();\r",
											"\r",
											"    // Проверка наличия необходимых полей в корректном уровне вложенности\r",
											"    if (response.data && response.data.payload && response.data.payload.id) {\r",
											"        // Сохранение значения id в переменную коллекции\r",
											"        pm.collectionVariables.set(\"LS_id\", response.data.payload.id);\r",
											"        \r",
											"        // Проверка сохранения переменной\r",
											"        let savedValue = pm.collectionVariables.get(\"LS_id\");\r",
											"        if (savedValue === String(response.data.payload.id)) {\r",
											"            console.log(\"Payload ID успешно сохранен в переменную коллекции LS_id:\", savedValue);\r",
											"        } else {\r",
											"            console.log(\"Ошибка сохранения переменной в коллекцию. Ожидаемое значение:\", response.data.payload.id, \"Сохраненное значение:\", savedValue);\r",
											"        }\r",
											"    } else {\r",
											"        console.log(\"Поле id не найдено в ответе или структура ответа не соответствует ожиданиям\");\r",
											"        console.log(\"Ответ:\", JSON.stringify(response, null, 2));\r",
											"    }\r",
											"} catch (e) {\r",
											"    console.log(\"Ошибка при обработке ответа JSON:\", e);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\":\"#F4F5F6\",\r\n    \"color\":\"#81888D\",\r\n    \"description\":\"ЛС созданно\",\r\n    \"title\":\"Создание_ЛС\",\r\n    \"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n    \"endAt\":\"2024-05-22T06:30:00+03:00\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Без описания",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Сохраняем в переменную дату занятий \"startAt\", имя переменной \"BO_startAT\"\r",
											"// Получение JSON-ответа\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (response.data && response.data.startAt) {\r",
											"    // Сохранение значения startAt в переменную коллекции\r",
											"    pm.collectionVariables.set(\"BO_startAT\", response.data.startAt);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"startAt сохранен в переменную коллекции BO_startAT:\", response.data.startAt);\r",
											"} else {\r",
											"    console.log(\"Поле startAt не найдено в ответе\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Сохраняем в переменную id ЛС, имя переменной \"BO_Id\"\r",
											"// Получение JSON-ответа\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (jsonData && jsonData.data && jsonData.data.payload && jsonData.data.payload.id) {\r",
											"    // Сохранение значения ID из поля payload в переменную коллекции\r",
											"    pm.collectionVariables.set(\"BO_Id\", jsonData.data.payload.id);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"ID из поля payload сохранен в переменную коллекции BO_Id:\", jsonData.data.payload.id);\r",
											"} else {\r",
											"    console.log(\"Поле payload.id не найдено в ответе\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\":\"#F4F5F6\",\r\n    \"color\":\"#81888D\",\r\n    \"description\":\"\",\r\n    \"title\":\"Без описания\",\r\n   \"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n    \"endAt\":\"2024-05-22T06:30:00+03:00\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Применить зеленый цвет",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Сохраняем в переменную дату занятий \"startAt\", имя переменной \"GC_startAT\"\r",
											"// Получение JSON-ответа\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (response.data && response.data.startAt) {\r",
											"    // Сохранение значения startAt в переменную коллекции\r",
											"    pm.collectionVariables.set(\"GC_startAT\", response.data.startAt);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"startAt сохранен в переменную коллекции GC_startAT:\", response.data.startAt);\r",
											"} else {\r",
											"    console.log(\"Поле startAt не найдено в ответе\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Сохраняем в переменную id ЛС, имя переменной \"GC_Id\"\r",
											"// Получение JSON-ответа\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (jsonData && jsonData.data && jsonData.data.payload && jsonData.data.payload.id) {\r",
											"    // Сохранение значения ID из поля payload в переменную коллекции\r",
											"    pm.collectionVariables.set(\"GC_Id\", jsonData.data.payload.id);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"ID из поля payload сохранен в переменную коллекции GC_Id:\", jsonData.data.payload.id);\r",
											"} else {\r",
											"    console.log(\"Поле payload.id не найдено в ответе\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\":\"#EBFDF2\",\r\n    \"color\":\"#43B658\",\r\n    \"description\":\"Зеленка\",\r\n    \"title\":\"Зеленый цвет\",\r\n    \"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n    \"endAt\":\"2024-05-22T06:30:00+03:00\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Описание 500 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Сохраняем в переменную дату занятий \"startAt\", имя переменной \"D_startAT\"\r",
											"// Получение JSON-ответа\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (response.data && response.data.startAt) {\r",
											"    // Сохранение значения startAt в переменную коллекции\r",
											"    pm.collectionVariables.set(\"D_startAT\", response.data.startAt);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"startAt сохранен в переменную коллекции D_startAT:\", response.data.startAt);\r",
											"} else {\r",
											"    console.log(\"Поле startAt не найдено в ответе\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Сохраняем в переменную id ЛС, имя переменной \"D_Id\"\r",
											"// Получение JSON-ответа\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (jsonData && jsonData.data && jsonData.data.payload && jsonData.data.payload.id) {\r",
											"    // Сохранение значения ID из поля payload в переменную коллекции\r",
											"    pm.collectionVariables.set(\"D_Id\", jsonData.data.payload.id);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"ID из поля payload сохранен в переменную коллекции D_Id:\", jsonData.data.payload.id);\r",
											"} else {\r",
											"    console.log(\"Поле payload.id не найдено в ответе\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\":\"#F9EBFF\",\r\n    \"color\":\"#D478F1\",\r\n    \"description\":\"Существенных образом плановых в позволяет проверки анализа же что постоянный количественный место что формировании и постоянный организации же способствует высшего активности и реализация равным позволяет порядка, место позволяет таким также также дальнейших подготовки особенности формировании реализация играет порядка, выполнять также нас активизации. Направлений порядка, значение в значение в обучения прогрессивного важные анализа существенных активности деятельности а равным и количественный\",\r\n    \"title\":\"500 сиволов\",\r\n   \"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n    \"endAt\":\"2024-05-22T06:30:00+03:00\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить_ЛС_БО",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Выводит на консоль что событие удалено\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем формат ответа\r",
											"if (response_data && response_data.data !== undefined && response_data.errors === null) {\r",
											"    if (response_data.data === true) {\r",
											"        console.log(\"Событие удалено.\");\r",
											"    } else {\r",
											"        console.log(\"Событие не удалено.\");\r",
											"    }\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка. Формат ответа не соответствует ожидаемому.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": {{BO_Id}},\r\n        \"startAt\": \"{{BO_startAT}}\"\r\n    }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/removePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"removePersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить_ЛС_ЗЦ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Выводит на консоль что событие удалено\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем формат ответа\r",
											"if (response_data && response_data.data !== undefined && response_data.errors === null) {\r",
											"    if (response_data.data === true) {\r",
											"        console.log(\"Событие удалено.\");\r",
											"    } else {\r",
											"        console.log(\"Событие не удалено.\");\r",
											"    }\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка. Формат ответа не соответствует ожидаемому.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": {{GC_Id}},\r\n        \"startAt\": \"{{GC_startAT}}\"\r\n    }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/removePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"removePersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить_ЛС_500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Выводит на консоль что событие удалено\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем формат ответа\r",
											"if (response_data && response_data.data !== undefined && response_data.errors === null) {\r",
											"    if (response_data.data === true) {\r",
											"        console.log(\"Событие удалено.\");\r",
											"    } else {\r",
											"        console.log(\"Событие не удалено.\");\r",
											"    }\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка. Формат ответа не соответствует ожидаемому.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": {{D_Id}},\r\n        \"startAt\": \"{{D_startAT}}\"\r\n    }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/removePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"removePersonal"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Редактирование события",
					"item": [
						{
							"name": "Изменить цвет",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Сообщает в консоли, что Личное событие успешно отредактировано. ID события\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем, было ли событие успешно отредактировано\r",
											"if (response_data && response_data.data && response_data.data.eventId) {\r",
											"    console.log(\"Личное событие успешно отредактировано. ID события:\", response_data.data.eventId);\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка при редактировании личного события.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"backgroundColor\":\"#FFF7C7\",\r\n\"color\":\"#FAC641\",\r\n\"description\":\"ЛС созданно\",\r\n\"title\":\"Создание_ЛС\",\r\n\"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n\"endAt\":\"2024-05-22T06:30:00+03:00\",\r\n\"id\":{{LS_id}},\r\n\"oldStartAt\":\"2024-05-22T06:00:00+03:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/updatePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"updatePersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменить описание",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Сообщает в консоли, что Личное событие успешно отредактировано. ID события\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем, было ли событие успешно отредактировано\r",
											"if (response_data && response_data.data && response_data.data.eventId) {\r",
											"    console.log(\"Личное событие успешно отредактировано. ID события:\", response_data.data.eventId);\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка при редактировании личного события.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"backgroundColor\":\"#FFF7C7\",\r\n\"color\":\"#FAC641\",\r\n\"description\":\"Описание\",\r\n\"title\":\"Создание_ЛС\",\r\n\"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n\"endAt\":\"2024-05-22T06:30:00+03:00\",\r\n\"id\":{{LS_id}},\r\n\"oldStartAt\":\"2024-05-22T06:00:00+03:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/updatePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"updatePersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменить название",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Сообщает в консоли, что Личное событие успешно отредактировано. ID события\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем, было ли событие успешно отредактировано\r",
											"if (response_data && response_data.data && response_data.data.eventId) {\r",
											"    console.log(\"Личное событие успешно отредактировано. ID события:\", response_data.data.eventId);\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка при редактировании личного события.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"backgroundColor\":\"#FFF7C7\",\r\n\"color\":\"#FAC641\",\r\n\"description\":\"ЛС Отредактированно\",\r\n\"title\":\"Изменить название\",\r\n\"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n\"endAt\":\"2024-05-22T06:30:00+03:00\",\r\n\"id\":{{LS_id}},\r\n\"oldStartAt\":\"2024-05-22T06:00:00+03:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/updatePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"updatePersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменить дату",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Сообщает в консоли, что Личное событие успешно отредактировано. ID события\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем, было ли событие успешно отредактировано\r",
											"if (response_data && response_data.data && response_data.data.eventId) {\r",
											"    console.log(\"Личное событие успешно отредактировано. ID события:\", response_data.data.eventId);\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка при редактировании личного события.\");\r",
											"}\r",
											"\r",
											"\r",
											"// Сохраняем в переменную дату занятий \"startAt\", имя переменной \"startAT\"\r",
											"// Получение JSON-ответа\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (response.data && response.data.startAt) {\r",
											"    // Сохранение значения startAt в переменную коллекции\r",
											"    pm.collectionVariables.set(\"startAT\", response.data.startAt);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"startAt сохранен в переменную коллекции startAT:\", response.data.startAt);\r",
											"} else {\r",
											"    console.log(\"Поле startAt не найдено в ответе\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Сохраняем в переменную id ЛС, имя переменной \"New_Id\"\r",
											"// Получение JSON-ответа\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (jsonData && jsonData.data && jsonData.data.payload && jsonData.data.payload.id) {\r",
											"    // Сохранение значения ID из поля payload в переменную коллекции\r",
											"    pm.collectionVariables.set(\"New_Id\", jsonData.data.payload.id);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"ID из поля payload сохранен в переменную коллекции New_Id:\", jsonData.data.payload.id);\r",
											"} else {\r",
											"    console.log(\"Поле payload.id не найдено в ответе\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"backgroundColor\":\"#FFF7C7\",\r\n\"color\":\"#FAC641\",\r\n\"description\":\"ЛС Отредактированно\",\r\n\"title\":\"Изменить дату\",\r\n\"startAt\":\"2024-05-25T06:00:00+03:00\",\r\n\"endAt\":\"2024-05-25T06:30:00+03:00\",\r\n\"id\":{{LS_id}},\r\n\"oldStartAt\":\"2024-05-22T06:00:00+03:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/updatePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"updatePersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить собитие",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Выводит на консоль что событие удалено\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем формат ответа\r",
											"if (response_data && response_data.data !== undefined && response_data.errors === null) {\r",
											"    if (response_data.data === true) {\r",
											"        console.log(\"Событие удалено.\");\r",
											"    } else {\r",
											"        console.log(\"Событие не удалено.\");\r",
											"    }\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка. Формат ответа не соответствует ожидаемому.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":{{New_Id}},\r\n    \"startAt\": \"{{startAT}}\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/removePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"removePersonal"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Негативные сценарии",
			"item": [
				{
					"name": "Добавление события",
					"item": [
						{
							"name": "Без названия",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Статус код 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Проверка наличии ошибок в теле ответа\r",
											"// Пример тела ответа\r",
											"let response = pm.response.json();\r",
											"// Проверяем наличие ошибок в теле ответа\r",
											"pm.test(\"Проверка наличия ошибок в ответе\", function () {\r",
											"    if (response.errors && response.errors.length > 0) {\r",
											"        let hasErrors = false;\r",
											"        \r",
											"        response.errors.forEach(function (error) {\r",
											"            let property = error.property;\r",
											"            let errorMessage = error.error.message;\r",
											"            let errorCode = error.error.code;\r",
											"\r",
											"            // Проверяем, есть ли ошибка в поле 'title'\r",
											"            if (property === \"title\") {\r",
											"                hasErrors = true;\r",
											"                \r",
											"                // Выводим информацию об ошибке в консоль Postman\r",
											"                console.log(`Ошибка в свойстве '${property}': ${errorMessage} (Код: ${errorCode})`);\r",
											"                \r",
											"                // Устанавливаем тест на провал\r",
											"                pm.expect(false, `Ошибка в свойстве '${property}': ${errorMessage} (Код: ${errorCode})`).to.be.true;\r",
											"            }\r",
											"        });\r",
											"        \r",
											"        if (!hasErrors) {\r",
											"            // Если ошибок в 'title' нет, тест проходит успешно\r",
											"            pm.expect(hasErrors, \"Ошибок в поле 'title' нет\").to.be.false;\r",
											"        }\r",
											"    } else {\r",
											"        // Если нет ошибок в теле ответа, тест проходит успешно\r",
											"        pm.expect(response.errors, \"Ошибок в ответе нет\").to.be.undefined;\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\":\"#F4F5F6\",\r\n    \"color\":\"#81888D\",\r\n    \"description\":\"ЛС созданно\",\r\n    \"title\":\"\",\r\n    \"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n    \"endAt\":\"2024-05-22T06:30:00+03:00\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Вназвании 41 символ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Статус код 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Проверка наличии ошибок в теле ответа\r",
											"// Пример тела ответа\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Проверяем наличие ошибок в теле ответа\r",
											"pm.test(\"Проверка наличия ошибок в ответе\", function () {\r",
											"    if (response.errors && response.errors.length > 0) {\r",
											"        let hasErrors = false;\r",
											"        \r",
											"        response.errors.forEach(function (error) {\r",
											"            let property = error.property;\r",
											"            let errorMessage = error.error.message;\r",
											"            let errorCode = error.error.code;\r",
											"\r",
											"            // Проверяем, есть ли ошибка в поле 'title'\r",
											"            if (property === \"title\") {\r",
											"                hasErrors = true;\r",
											"                \r",
											"                // Выводим информацию об ошибке в консоль Postman\r",
											"                console.log(`Ошибка в свойстве '${property}': ${errorMessage} (Код: ${errorCode})`);\r",
											"                \r",
											"                // Устанавливаем тест на провал\r",
											"                pm.expect(false, `Ошибка в свойстве '${property}': ${errorMessage} (Код: ${errorCode})`).to.be.true;\r",
											"            }\r",
											"        });\r",
											"        \r",
											"        if (!hasErrors) {\r",
											"            // Если ошибок в 'title' нет, тест проходит успешно\r",
											"            pm.expect(hasErrors, \"Ошибок в поле 'title' нет\").to.be.false;\r",
											"        }\r",
											"    } else {\r",
											"        // Если нет ошибок в теле ответа, тест проходит успешно\r",
											"        pm.expect(response.errors, \"Ошибок в ответе нет\").to.be.undefined;\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\":\"#F4F5F6\",\r\n    \"color\":\"#81888D\",\r\n    \"description\":\"ЛС созданно\",\r\n    \"title\":\"йцукенгшщзфывапролджячсмитьйцукенгшщзхфыв\",\r\n    \"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n    \"endAt\":\"2024-05-22T06:30:00+03:00\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Без даты",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Статус код 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Функция для поиска ошибок в указанных свойствах и вывода их в консоль и Test Results\r",
											"function findErrorsInProperties(errors) {\r",
											"    errors.forEach(function(error) {\r",
											"        var errorMessage = \"Обнаружена ошибка в свойстве \" + error.property + \": \" + error.error.message;\r",
											"        console.warn(errorMessage);\r",
											"        pm.test(errorMessage, function() {\r",
											"            pm.expect.fail(errorMessage);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Проверяем наличие ошибок в теле ответа\r",
											"if (response_data.errors) {\r",
											"    findErrorsInProperties(response_data.errors);\r",
											"} else {\r",
											"    var successMessage = \"Ответ не содержит ошибок.\";\r",
											"    console.log(successMessage);\r",
											"    pm.test(successMessage, function() {\r",
											"        pm.expect(true).to.be.true;\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\":\"#F4F5F6\",\r\n    \"color\":\"#81888D\",\r\n    \"description\":\"ЛС созданно\",\r\n    \"title\":\"Без даты\",\r\n    \"startAt\":\"\",\r\n    \"endAt\":\"\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Дата из прошлого (Более одного года)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200",
											"pm.test(\"Статус код 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// Проверка создания события",
											"// Парсим тело ответа в JSON",
											"var response_data = JSON.parse(responseBody);",
											"",
											"// Проверяем, успешно ли создано событие и выводим соответствующее сообщение",
											"if (response_data.data && response_data.data.eventId) {",
											"    console.log(\"Событие успешно создано. ID события: \" + response_data.data.eventId);",
											"} else {",
											"    console.log(\"Ошибка: не удалось получить ID созданного события.\");",
											"}",
											"",
											"",
											"",
											"// Сохраняем в переменную дату занятий \"startAt\", имя переменной \"Data_startAT\"",
											"// Получение JSON-ответа",
											"let response = pm.response.json();",
											"",
											"// Проверка наличия необходимых полей",
											"if (response.data && response.data.startAt) {",
											"    // Сохранение значения startAt в переменную коллекции",
											"    pm.collectionVariables.set(\"Data_startAT\", response.data.startAt);",
											"    ",
											"    // Вывод информации в консоль для проверки",
											"    console.log(\"startAt сохранен в переменную коллекции Data_startAT:\", response.data.startAt);",
											"} else {",
											"    console.log(\"Поле startAt не найдено в ответе\");",
											"}",
											"",
											"",
											"",
											"// Сохраняем в переменную id ЛС, имя переменной \"Data_Id\"",
											"// Получение JSON-ответа",
											"let jsonData = pm.response.json();",
											"",
											"// Проверка наличия необходимых полей",
											"if (jsonData && jsonData.data && jsonData.data.payload && jsonData.data.payload.id) {",
											"    // Сохранение значения ID из поля payload в переменную коллекции",
											"    pm.collectionVariables.set(\"Data_Id\", jsonData.data.payload.id);",
											"    ",
											"    // Вывод информации в консоль для проверки",
											"    console.log(\"ID из поля payload сохранен в переменную коллекции Data_Id:\", jsonData.data.payload.id);",
											"} else {",
											"    console.log(\"Поле payload.id не найдено в ответе\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\",\r\n    \"color\": \"#81888D\",\r\n    \"description\": \"ЛС созданно\",\r\n    \"title\": \"Создание_ЛС\",\r\n    \"startAt\": \"2023-05-22T06:00:00+03:00\",\r\n    \"endAt\": \"2023-05-22T06:30:00+03:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Нестандартный цвет",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Статус код 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Проверка создания события\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = JSON.parse(responseBody);\r",
											"\r",
											"// Проверяем, успешно ли создано событие и выводим соответствующее сообщение\r",
											"if (response_data.data && response_data.data.eventId) {\r",
											"    console.log(\"Событие успешно создано. ID события: \" + response_data.data.eventId);\r",
											"} else {\r",
											"    console.log(\"Ошибка: не удалось получить ID созданного события.\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Сохраняем в переменную дату занятий \"startAt\", имя переменной \"RC_startAT\"\r",
											"// Получение JSON-ответа\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (response.data && response.data.startAt) {\r",
											"    // Сохранение значения startAt в переменную коллекции\r",
											"    pm.collectionVariables.set(\"RC_startAT\", response.data.startAt);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"startAt сохранен в переменную коллекции RC_startAT:\", response.data.startAt);\r",
											"} else {\r",
											"    console.log(\"Поле startAt не найдено в ответе\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Сохраняем в переменную id ЛС, имя переменной \"RC_Id\"\r",
											"// Получение JSON-ответа\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Проверка наличия необходимых полей\r",
											"if (jsonData && jsonData.data && jsonData.data.payload && jsonData.data.payload.id) {\r",
											"    // Сохранение значения ID из поля payload в переменную коллекции\r",
											"    pm.collectionVariables.set(\"RC_Id\", jsonData.data.payload.id);\r",
											"    \r",
											"    // Вывод информации в консоль для проверки\r",
											"    console.log(\"ID из поля payload сохранен в переменную коллекции RC_Id:\", jsonData.data.payload.id);\r",
											"} else {\r",
											"    console.log(\"Поле payload.id не найдено в ответе\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"backgroundColor\":\"#F4F5F6\",\r\n    \"color\":\"#FF0000\",\r\n    \"description\":\"Красный цвет\",\r\n    \"title\":\"Красный цвет\",\r\n    \"startAt\":\"2024-05-22T06:00:00+03:00\",\r\n    \"endAt\":\"2024-05-22T06:30:00+03:00\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/createPersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"createPersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить_ЛС_Дата_Прошлого",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Статус код 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Сообщает в консоли, что событие удалено\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем формат ответа\r",
											"if (response_data && response_data.data !== undefined && response_data.errors === null) {\r",
											"    if (response_data.data === true) {\r",
											"        console.log(\"Событие удалено.\");\r",
											"    } else {\r",
											"        console.log(\"Событие не удалено.\");\r",
											"    }\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка. Формат ответа не соответствует ожидаемому.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": {{Data_Id}},\r\n        \"startAt\": \"{{Data_startAT}}\"\r\n    }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/removePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"removePersonal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить_ЛС_Красный",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверяем, что статус-код 200\r",
											"pm.test(\"Статус код 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Сообщает в консоли, что событие удалено\r",
											"// Парсим тело ответа в JSON\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"// Проверяем формат ответа\r",
											"if (response_data && response_data.data !== undefined && response_data.errors === null) {\r",
											"    if (response_data.data === true) {\r",
											"        console.log(\"Событие удалено.\");\r",
											"    } else {\r",
											"        console.log(\"Событие не удалено.\");\r",
											"    }\r",
											"} else {\r",
											"    console.error(\"Произошла ошибка. Формат ответа не соответствует ожидаемому.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": {{RC_Id}},\r\n        \"startAt\": \"{{RC_startAT}}\"\r\n    }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/schedule/removePersonal",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"schedule",
										"removePersonal"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "token_global=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VySWQiOjE0NzIwMDY5LCJpZGVudGl0eSI6InRlc3QudHN0MzIwQHNreWVuZy5ydSIsImlkZW50aXR5TG9naW4iOm51bGwsImlkZW50aXR5RW1haWwiOiJ0ZXN0LnRzdDMyMEBza3llbmcucnUiLCJpZGVudGl0eVBob25lIjoiKzc5ODU0NTg2NTY4IiwibmFtZSI6InRlc3RURUNUIiwic3VybmFtZSI6bnVsbCwiZW1haWwiOiJ0ZXN0LnRzdDMyMEBza3llbmcucnUiLCJ1aUxhbmd1YWdlIjoicnUiLCJsb2NhbGUiOiJydSIsInNlcnZpY2VMb2NhbGUiOm51bGwsInVhcyI6MzAsImp3dFR5cGUiOjEsImp0aSI6IjBicmRiT21CckpPdzlBQzNRR2dKN3c1RHgwVXBZcEJQIiwiYnJhbmQiOm51bGwsImV4cCI6MTcxNjQ0OTQ3NywiYmlydGhkYXkiOiIyMDA3LTEyLTI4IiwiYUlzU3Ryb25nIjp0cnVlLCJhVHlwZSI6IlVTRVJOQU1FX1BBU1NXT1JEIiwiYVRpbWUiOjE3MTYyODAyNzQsInJvbGVzIjpbIlJPTEVfVEVBQ0hFUl9DQU5ESURBVEUiLCJST0xFX1RFQUNIRVJfQ0FORElEQVRFX0JBU0VfQUNDRVNTIiwiUk9MRV9UVENfVVNBR0UiLCJST0xFX1ZJTUJPWF9URUFDSEVSX1VTQUdFIiwiUk9MRV9URUFDSEVSIiwiUk9MRV9DUk0yX1RFQUNIRVJfQUNDRVNTIiwiUk9MRV9NQVRIX1RFQUNIRVIiLCJST0xFX01BVEhfQ09OVEVOVF9USEVNRV9WSUVXIl19.z8OMdzMztG_i9cFg8Zv8eSglHCCg-tYR8h8_wNv-JCGj3-VFohfc4ypW5PsO2fi-G72xX9MIBbsbkWAJJKKoKAZb345j-HV-wr84X8s22j_vbXh4d1izUrHMMDgy7AQQZaP5kA-XD7katl4hnZZj1CDb9v7XZOOcJQmw8_zbLhlcbnm6LHxvrZWyT281IPC0aDzKjggSKDeg-xlXEWWzWpHVjramyA73UGdLc5UNLXyePX8_x6pBxuDJmHBltrY7nKft7mcmiwBzsCXqTv5L2hIjbMOUDrnVpL7KeWCYMhuOVgco4V9oFzIm-7Qa5m6vugxREZcaIPeDHL_tuPJsqxq0z1IaWOnx78k60O60obAUJW3w-QINpxerTD2AQNSB5Qo4XxW2-OlTFKvSWXE9aESZbeKcvXQQyu6xLSa9ROAN0CWzP1IiNeqgAUAtC4lLg3V6IKck3GmhIfg3G6IJO9rrJbFD3PFil5ckRO_qZaoxcUuxiaOTpVk-QQgLCIb9pBbHAnAtHMTxhJtKQf3K4ZryAPvT43g7uOn84oBaS0ZIW75cIkjNirJqYSAUU20NAdnqFBnPf_cjyNKRsTM41hPnrv8ciNKkrL1qfbB8xodWQh0lGIvRxgAAQuGqpsLt4C3O2FcE6v60LVAsh0H4F0-FYgttzCQ4y2Kp71JDKUI",
			"type": "string"
		},
		{
			"key": "baseURL",
			"value": "https://api-teachers.skyeng.ru",
			"type": "string"
		},
		{
			"key": "LS_id",
			"value": ""
		},
		{
			"key": "BO_startAT",
			"value": ""
		},
		{
			"key": "BO_Id",
			"value": ""
		},
		{
			"key": "GC_startAT",
			"value": ""
		},
		{
			"key": "GC_Id",
			"value": ""
		},
		{
			"key": "D_startAT",
			"value": ""
		},
		{
			"key": "D_Id",
			"value": ""
		},
		{
			"key": "startAT",
			"value": ""
		},
		{
			"key": "New_Id",
			"value": ""
		},
		{
			"key": "Data_startAT",
			"value": ""
		},
		{
			"key": "Data_Id",
			"value": ""
		},
		{
			"key": "RC_startAT",
			"value": ""
		},
		{
			"key": "RC_Id",
			"value": ""
		}
	]
}